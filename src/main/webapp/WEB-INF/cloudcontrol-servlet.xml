<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">


  <!-- Static resources since we are handling all requests -->
  <mvc:resources mapping="/resources/**" location="/resources/" />
  <mvc:resources mapping="/**" location="/" />

  <!-- Activates various annotations to be detected in bean classes -->
  <context:annotation-config />

  <!-- Scans the classpath of this application for @Components to deploy as beans -->
  <context:component-scan base-package="edu.ucar.unidata.cloudcontrol" />

  <!-- Configures the @Controller programming model -->
  <mvc:annotation-driven />
  
  <!-- Properties injection -->
  <bean id="applicationProperties" 
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>classpath:application.properties</value>
      </list>
    </property>
  </bean>     
  
  <!-- Configure Spring-Security  -->
  <security:global-method-security pre-post-annotations="enabled" proxy-target-class="true"/>
  <security:http pattern="/resources/**" security="none"/>
  <security:http auto-config="true" use-expressions="true">

    <security:access-denied-handler error-page="/denied" />  

    <security:form-login
      login-processing-url="/j_spring_security_check"
      login-page="/login"
      username-parameter="userName"
      password-parameter="password"
	  authentication-success-handler-ref="customAuthenticationSuccessHandler"
      authentication-failure-handler-ref="authenticationFailureHandler"/>
    
    <security:logout
      invalidate-session="true"
      logout-success-url="/login"
      logout-url="/j_spring_security_logout"/>
      
    <security:intercept-url pattern="/index.jsp" access="permitAll" />
    <security:intercept-url pattern="/welcome" access="permitAll" />
    <security:intercept-url pattern="/user/register" access="permitAll" />
    <security:intercept-url pattern="/login/**" access="permitAll" />
    <security:intercept-url pattern="/denied" access="permitAll" />
    <security:intercept-url pattern="/**" access="isAuthenticated()" />
    
    <!-- enable csrf protection -->
    <security:csrf/>
  </security:http>
  
  <!-- Declare an authentication-manager to use a custom userDetailsService -->
  <security:authentication-manager>
    <security:authentication-provider user-service-ref="userDetailsService">
     <security:password-encoder ref="passwordEncoder"/>
    </security:authentication-provider>
  </security:authentication-manager>
  
  <!-- Use a password encoder since the user's passwords are stored encrypted in the database -->
  <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
  
  <bean id="customAuthenticationSuccessHandler" class="edu.ucar.unidata.cloudcontrol.service.CustomAuthenticationSuccessHandler"/>
  
  <bean id="authenticationFailureHandler"
      class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
      <property name="exceptionMappings">
          <props>
              <prop key="org.springframework.security.authentication.BadCredentialsException">/login/badCredentials</prop>
              <prop key="org.springframework.security.authentication.LockedException">/login/accountLocked</prop>
              <prop key="org.springframework.security.authentication.DisabledException">/login/accountDisabled</prop>
          </props>
      </property>
  </bean>
 
  <!-- Message source resolver to use messages.properties file in the 'war/WEB-INF/classes' directory -->
  <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basename" value="messages"/>
  </bean>

  <!-- Resolves view names to the .jsp resources within the /WEB-INF/views directory --> 
  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="prefix" value="/WEB-INF/views/"></property>
    <property name="suffix" value=".jsp"></property>        
  </bean>
  
  <!-- DAO injection -->  
  <bean id="userDetailsService" class="edu.ucar.unidata.cloudcontrol.service.UserDetailsServiceImpl">
    <property name="userDao" ref="userDao"/>
  </bean>

  <bean id="userManager" class="edu.ucar.unidata.cloudcontrol.service.UserManagerImpl">
    <property name="userDao" ref="userDao"/>
  </bean>

  <bean id="userDao" class="edu.ucar.unidata.cloudcontrol.repository.JdbcUserDao">
    <property name="dataSource" ref="dbDataSource"/>
  </bean>
  
  <!-- Declaration for controller use -->
  <bean id="imageManager" class="edu.ucar.unidata.cloudcontrol.service.docker.ImageManagerImpl" />
  <bean id="containerManager" class="edu.ucar.unidata.cloudcontrol.service.docker.ContainerManagerImpl" />  

  <!-- Declare a datasource that has pooling capabilities--> 
  <bean id="dbDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="${jdbc.driverClassName}"/>
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
    <property name="initialSize" value="10" />
    <property name="maxActive" value="20" />
    <property name="maxIdle" value="-1" />
    <property name="maxWait" value="-1" />
    <property name="validationQuery" value="${jdbc.validationQuery}" />
  </bean>
 

</beans>

